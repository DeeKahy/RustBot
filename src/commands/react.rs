use crate::{Context, Error};
use poise::serenity_prelude as serenity;
use serenity::ReactionType;
use std::collections::HashMap;

/// React to a message with emoji letters
#[poise::command(prefix_command, slash_command)]
pub async fn react(
    ctx: Context<'_>,
    #[description = "Text to react with (e.g., 'lol', 'cool')"] text: String,
    #[description = "Message ID to react to (for slash commands)"] message_id: Option<String>,
) -> Result<(), Error> {
    log::info!(
        "React command called by {} with text: '{}'",
        ctx.author().name,
        text
    );

    if text.trim().is_empty() {
        ctx.say("‚ùå Please provide text to react with! Example: `-react lol`")
            .await?;
        return Ok(());
    }

    // Delete the invoker's message if it's a prefix command
    if let poise::Context::Prefix(prefix_ctx) = &ctx {
        if let Err(e) = prefix_ctx.msg.delete(&ctx.http()).await {
            log::warn!("Failed to delete invoker's message: {}", e);
        }
    }

    // Get the message to react to
    let replied_message = match ctx {
        poise::Context::Prefix(prefix_ctx) => {
            if let Some(referenced_msg) = &prefix_ctx.msg.referenced_message {
                referenced_msg.as_ref().clone()
            } else {
                ctx.say("‚ùå Please reply to a message to react to it!")
                    .await?;
                return Ok(());
            }
        }
        poise::Context::Application(_) => {
            // For slash commands, require message_id parameter
            let msg_id_str = message_id
                .ok_or("‚ùå For slash commands, please provide the message ID to react to!")?;

            let msg_id = msg_id_str.parse::<u64>().map_err(|_| {
                "‚ùå Invalid message ID format! Please provide a valid Discord message ID."
            })?;

            match ctx.channel_id().message(&ctx.http(), msg_id).await {
                Ok(msg) => msg,
                Err(_) => {
                    ctx.say("‚ùå Could not find a message with that ID in this channel!")
                        .await?;
                    return Ok(());
                }
            }
        }
    };

    // Create emoji mapping with fallbacks
    let emoji_map = create_emoji_mapping();

    let text_lower = text.to_lowercase();
    let mut used_emojis = std::collections::HashSet::new();
    let mut reactions_added = 0;

    // Process each character
    for ch in text_lower.chars() {
        if let Some(emoji_options) = emoji_map.get(&ch) {
            // Find the first unused emoji for this character
            let mut emoji_to_use = None;
            for emoji in emoji_options {
                if !used_emojis.contains(emoji) {
                    emoji_to_use = Some(emoji);
                    break;
                }
            }

            if let Some(emoji) = emoji_to_use {
                // Try to add the reaction
                match replied_message
                    .react(&ctx.http(), ReactionType::Unicode(emoji.to_string()))
                    .await
                {
                    Ok(_) => {
                        used_emojis.insert(emoji);
                        reactions_added += 1;
                        log::debug!("Added reaction {emoji} for character '{ch}'");

                        // Small delay to avoid rate limiting
                        tokio::time::sleep(tokio::time::Duration::from_millis(100)).await;
                    }
                    Err(e) => {
                        log::warn!("Failed to add reaction {emoji} for character '{ch}': {e}");
                    }
                }
            } else {
                log::debug!("No available emoji for character '{ch}' (all used)");
            }
        } else {
            log::debug!("No emoji mapping for character '{ch}'");
        }
    }

    // Only send error messages for slash commands or if no reactions were added
    if reactions_added == 0 {
        if let poise::Context::Application(_) = &ctx {
            ctx.say(
                "‚ùå Couldn't add any reactions. The emojis might already be used or unavailable.",
            )
            .await?;
        }
    }

    log::info!("React command completed. Added {reactions_added} reactions");
    Ok(())
}

fn create_emoji_mapping() -> HashMap<char, Vec<&'static str>> {
    let mut map = HashMap::new();

    // Letters with regional indicators as primary option, then fallbacks
    map.insert('a', vec!["üá¶", "üÖ∞Ô∏è", "üî∫", "üÖ∞", "4Ô∏è‚É£"]);
    map.insert('b', vec!["üáß", "üÖ±Ô∏è", "üÖ±", "6Ô∏è‚É£", "ü™®"]);
    map.insert('c', vec!["üá®", "¬©Ô∏è", "üåô", "‚ò™Ô∏è", "ü•ê"]);
    map.insert('d', vec!["üá©", "‚Ü©Ô∏è", "üåõ", "üåú", "üéØ"]);
    map.insert('e', vec!["üá™", "3Ô∏è‚É£", "üí∂", "üìß", "üî±"]);
    map.insert('f', vec!["üá´", "üéè", "ü™¶", "üì†", "üî•"]);
    map.insert('g', vec!["üá¨", "üîÑ", "üåÄ", "üéØ", "‚öôÔ∏è"]);
    map.insert('h', vec!["üá≠", "üè®", "üè•", "üè°", "‚ôì"]);
    map.insert('i', vec!["üáÆ", "‚ÑπÔ∏è", "1Ô∏è‚É£", "üç¶", "üßä"]);
    map.insert('j', vec!["üáØ", "üé∑", "üóæ", "ü™ù", "üï∫"]);
    map.insert('k', vec!["üá∞", "üéã", "ü¶ò", "ü•ù", "üîë"]);
    map.insert('l', vec!["üá±", "üáÆ", "1Ô∏è‚É£", "üè©", "üì±"]); // L is tricky, use I as fallback
    map.insert('m', vec!["üá≤", "‚ìÇÔ∏è", "„ÄΩÔ∏è", "üéµ", "üóª"]);
    map.insert('n', vec!["üá≥", "üìà", "üéµ", "üåÉ", "‚ôë"]);
    map.insert(
        'o',
        vec!["üá¥", "‚≠ï", "üÖæÔ∏è", "üÖæ", "0Ô∏è‚É£", "üî¥", "üü°", "üü¢", "üîµ", "üü£"],
    );
    map.insert('p', vec!["üáµ", "üÖøÔ∏è", "üÖø", "ü™©", "üìå"]);
    map.insert('q', vec!["üá∂", "üéØ", "üîç", "‚ùì", "ü™ô"]);
    map.insert('r', vec!["üá∑", "¬ÆÔ∏è", "üöÄ", "üåà", "‚ôªÔ∏è"]);
    map.insert('s', vec!["üá∏", "üí≤", "5Ô∏è‚É£", "üêç", "‚ö°"]);
    map.insert('t', vec!["üáπ", "‚úùÔ∏è", "üå¥", "üçµ", "üìê"]);
    map.insert('u', vec!["üá∫", "‚õé", "üîÑ", "üåô", "‚öì"]);
    map.insert('v', vec!["üáª", "‚úÖ", "‚ôà", "üé≠", "üîΩ"]);
    map.insert('w', vec!["üáº", "„Ä∞Ô∏è", "ü§∑", "üåä", "üíß"]);
    map.insert('x', vec!["üáΩ", "‚ùå", "‚úñÔ∏è", "‚ùé", "üîÄ"]);
    map.insert('y', vec!["üáæ", "üí¥", "üßò", "‚òØÔ∏è", "üåü"]);
    map.insert('z', vec!["üáø", "üí§", "‚ö°", "ü¶ì", "0Ô∏è‚É£"]);

    // Numbers
    map.insert('0', vec!["0Ô∏è‚É£", "‚≠ï", "üÖæÔ∏è", "üî¥"]);
    map.insert('1', vec!["1Ô∏è‚É£", "üáÆ", "‚ÑπÔ∏è", "ü•á"]);
    map.insert('2', vec!["2Ô∏è‚É£", "ü¶¢", "ü•à", "ü™ù"]);
    map.insert('3', vec!["3Ô∏è‚É£", "üá™", "ü•â", "üî±"]);
    map.insert('4', vec!["4Ô∏è‚É£", "üá¶", "üçÄ", "üî≤"]);
    map.insert('5', vec!["5Ô∏è‚É£", "üá∏", "üñêÔ∏è", "‚≠ê"]);
    map.insert('6', vec!["6Ô∏è‚É£", "üáß", "üéØ", "üîØ"]);
    map.insert('7', vec!["7Ô∏è‚É£", "üé∞", "üîß", "üìê"]);
    map.insert('8', vec!["8Ô∏è‚É£", "‚ôæÔ∏è", "üé±", "‚ö°"]);
    map.insert('9', vec!["9Ô∏è‚É£", "üåÄ", "üéØ", "üîÑ"]);

    // Special characters and punctuation
    map.insert(' ', vec!["‚¨ú", "‚ñ´Ô∏è", "‚ö™"]);
    map.insert('!', vec!["‚ùó", "‚ùï", "‚ÄºÔ∏è", "‚ö†Ô∏è"]);
    map.insert('?', vec!["‚ùì", "‚ùî", "ü§î", "üîç"]);
    map.insert('.', vec!["üî∏", "üîπ", "‚ö´", "‚ö™"]);
    map.insert(',', vec!["„Ä∞Ô∏è", "üíß", "üåä", "üî∏"]);
    map.insert(';', vec!["üòâ", "üòè", "üî∏", "üíß"]);
    map.insert(':', vec!["üòÆ", "üòØ", "‚ö´", "üî∏"]);
    map.insert('(', vec!["‚óÄÔ∏è", "üåô", "üåõ", "‚ö´"]);
    map.insert(')', vec!["‚ñ∂Ô∏è", "üåõ", "üåú", "‚ö´"]);
    map.insert('-', vec!["‚ûñ", "„Ä∞Ô∏è", "üí®", "‚ö´"]);
    map.insert('+', vec!["‚ûï", "‚úÖ", "üîÑ", "‚ö°"]);
    map.insert('=', vec!["üü∞", "‚ûñ", "„Ä∞Ô∏è", "‚ö´"]);
    map.insert('*', vec!["‚≠ê", "‚ú®", "üåü", "üí´"]);
    map.insert('/', vec!["„Ä∞Ô∏è", "üí®", "‚ö°", "üî∏"]);
    map.insert('\\', vec!["„Ä∞Ô∏è", "üí®", "‚ö°", "üîπ"]);
    map.insert('&', vec!["ü§ù", "‚ö°", "üîó", "üí´"]);
    map.insert('#', vec!["#Ô∏è‚É£", "üî≤", "‚ö´", "üî∏"]);
    map.insert('@', vec!["üá¶", "üÖ∞Ô∏è", "‚ö´", "üîò"]);

    map
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_emoji_mapping_exists() {
        let map = create_emoji_mapping();

        // Test that basic letters exist
        assert!(map.contains_key(&'a'));
        assert!(map.contains_key(&'z'));
        assert!(map.contains_key(&'l'));

        // Test that numbers exist
        assert!(map.contains_key(&'0'));
        assert!(map.contains_key(&'9'));

        // Test that 'l' has fallbacks including I
        let l_options = map.get(&'l').unwrap();
        assert!(l_options.contains(&"üáÆ")); // I as fallback for L
        assert!(l_options.len() > 1); // Multiple fallbacks
    }

    #[test]
    fn test_duplicate_handling() {
        let map = create_emoji_mapping();

        // Test that 'o' has many options for handling duplicates
        let o_options = map.get(&'o').unwrap();
        assert!(o_options.len() >= 5); // Should have multiple circle-like emojis
    }
}
